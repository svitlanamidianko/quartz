{"/":{"title":"Svitlana's Digital Corner","content":"hello. ","lastmodified":"2022-10-22T00:15:01.726196445Z","tags":null},"/notes/Telegram-Case-Study":{"title":"","content":"# Introduction\n_Written in April 2022_\n\nTelegram is a messaging service founded in 2013 by brothers Pavel and Nikolai Durov. The application is now [the top 6](https://www.statista.com/statistics/258749/most-popular-global-mobile-messenger-apps/) used messaging apps with ~550M Monthly Active Users. Its mission is to \"provide a secure means of communication that works everywhere on the planet ([source](https://telegram.org/faq?setln=ru)).\"\n\nIn this case study, I argue that Telegram delivers a superior User Experience by differentiating itself in a market and applying the leading UX/UI principles. I propose a new feature that should make its market positioning even more unique.\n\n\u003e [!Thinking thoughts] \n\u003e  Telegram differs from all of its competitors in its business structure as it has not been monetizing (and hence generating revenue) and solely relied on charities. How much does this factor influence Telegram UX success?\n\n# Part 1. Soo, what is this product about?\n## Feature Set - Kano Model\nTelegram offers a wide range of features, which  [Kano Mode](https://www.productplan.com/glossary/kano-model/#:~:text=The%20Kano%20Model%20(pronounced%20%E2%80%9CKah,are%20likely%20to%20satisfy%20customers.)[l](https://www.productplan.com/glossary/kano-model/#:~:text=The%20Kano%20Model%20(pronounced%20%E2%80%9CKah,are%20likely%20to%20satisfy%20customers.) can describe quite well. The model distinguishes between 3 types of features - must haves (basic), performers, and delighters.\n\nN. Kano, the creator of this model, suggests that to satisfy customer satisfaction and differentiate a product, one needs to have must-haves and performance features that are at least as good as competitors. Next, each simple extra feature is what defines user’s experience the most and contributes to the \"wow\" effect.  ![[notes/images/kanomodel.png | inlR ]]\n\nOn top of must-haves and excellent performance, Telegram has a wide range of delightful features which various user segments benefit from. For example, blockchain enthusiasts prefer enhanced security, programmers use developer tools, and general users love customizability. ![[notes/images/fig2.png| inlR ]]\n## Differentiating Feature - Chats *and* Channels\n\nWhat makes Telegram stand out is that it affords two things: \n1.  the exchange of information in `1-to-1` chats or `many-to-many` group chats; \n2. the dissemination of information in `1-to-many` channels (that could have up to 200,000 subscribers!). Consequently, Telegram makes itself a one-stop shop for anything  information-related.\n![[notes/images/fig3.png]]\n\nAlso, these features have a lot of delightful additions. For example, chats afford reactions, stickers, video circles, polls, video-calls, and location sharing, whereas channels also allow for Clubhouse-like audio-chats.\n\n## UX/UI Principles in Use\n\nMany principles have been developed in the design community that reinforce great user experience. Still, **simplicity** is one of the most useful heuristics to follow. Approaching product development with a “less is more” attitude creates an intuitive and straightforward UX flow associated with positive feelings for the end-user, empowering them and showing that anyone is wise to use the app.\n\nNorman (1988) describes one set of UX/UI principles in his book “Design of Everyday Things.” Telegram affords all-related functions around information and uses a bunch of **signifiers** in the form of icons to show it. Also, the combination of high-speed performance and **immediate feedback** generates a frictionless flow for the end-user.\n\n![[notes/images/fig4.png]]\n\nNext, Telegram also upholds both internal and external consistency.\n![[notes/images/fig5.png]]\nAnother fantastic UX principle is empowering users to combine small sub-tasks into bigger grouped activities. For example, think about when winding down to sleep, we would often stop reading the emails (task) and instead might open a meditation app or book (task). Here, the bigger activity to be done is to unwind and prepare yourself for sound rest. Similarly, Telegram recently took the first step in creating activity-based functions by enabling folders, which you can use to separate, for example, work and personal chats.\n![[notes/images/fig6.png]]\n\nLastly, I argue that Telegram **created a powerful [medium](http://worrydream.com/#!/TheHumaneRepresentationOfThought/note.html)** for sharing our thoughts and staying in touch. Current versions of WhatsApp and other messaging apps allow only to send a voice message or record a video (save it on your phone) and send it to the chat. At the same time, Telegram created a feature of video-circle messages that allows recording of in-moment videos that only live in Telegram. This way of communication enables messages to be more intimate, especially when knowing that it was not pre-recorded.\n\n# Part 2. There is always room for improvement\n\nTelegram has become a **super-app** for all tasks regarding information. Super apps are great because they reduce the amount of decision-making we need to do, as there is one place where you can accomplish them all. This all together leads to **minimization of customer effort.**\n\nHowever, any application can be improved, and given that Telegram now has found its product-market fit and should scale, I suggest that the objective of an proposed feature should be to acquire that Late Majority of users from [the Technology Adoption Life Cycle](https://en.wikipedia.org/wiki/Technology_adoption_life_cycle). For this, I argue that Telegram needs another compelling feature that would be unique in the messaging services landscape.\n\nBefore brainstorming, it is important to outline the user segments and user persona.\n![[notes/images/fig7.png]]\nGiven the huge rise of the creator and influencer economy, I focus on writers/influences from the channels category. The user persona fitting this category is shown below.\n![[notes/images/fig8.png]]\nTo address the user persona's needs, I suggest implementing a feature that replicates offline relationships more closely. Specifically, Joley seems to hang out with various people and friend groups. She shares different types of updates and details with each of those groups and individuals. She has her followers divided into \"close friends\" and \"friends \" on Instagram.\" However, she shares her main content on Telegram, and she wishes that there were more levels of intimacy on top of Instagram's taxonomy of “friends” and “close friends”.\n\nFor example, an influencer might have one channel called \"Updates from amazing Joley,\" in which she shares all kinds of thoughts, videos, photos, and findings with 10,000 of her subscribers. But among those subscribers, some users are patrons, close friends, partners, or family. In its current configuration, the Telegram channel only allows the \"all or nothing\" option - sharing a message there with 10,000 people or no one.\n\nI suggest granulating the options by allowing a writer to share a specific message with different people. Then, for example, if one particular personal photo only needs to be shared with close friends, Joley can choose a \"close friends\" group to communicate with while still staying in one space/channel.\n\n![[notes/images/fig9.png]]\nNext fig represents the competitive landscape, where the goal is to have your product/idea placed in the upper right quadrant. The new proposed feature for Telegram idea is precisely there, showing that I identified a significant gap that couild be bridged.\n![[notes/images/fig10.png]]\n#  Conclusion\n\nAll in all, Telegram’s ability to deliver a fantastic user experience should be taken as an example for many other apps, especially those in the social messaging services spac","lastmodified":"2022-10-22T00:15:01.726196445Z","tags":null},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Svitlana Midianko\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nenableSemanticSearch: false\noperandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Svitlana' Digital Corner\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/svitlana_mm\n  - link_name: LinkedIn\n    link: https://www.linkedin.com/in/svitlanamm/\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2022-10-22T00:15:01.726196445Z","tags":null}}